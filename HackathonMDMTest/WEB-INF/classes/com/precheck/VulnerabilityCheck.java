package com.precheck;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@WebServlet("/vulnerabilityCheck")
public class VulnerabilityCheck extends HttpServlet {
    private static final long serialVersionUID = 1L;

    // Map to store MDM versions and corresponding KB information
    private static final Map<String, String> mdmVersions = new HashMap<>();
    
    static {
        // Example versions and KB information
        mdmVersions.put("10.3", "Spring vulnerabilities (ER-29364)  :  1./infamdm/hub/cleanse/siperian-mrm-cleanse.ear -> lib/spring-core-3.2.16.RELEASE.jar 2./infamdm/hub/cleanse/siperian-mrm-cleanse.ear -> lib/spring-expression3.2.16.RELEASE.jar  : Low : 10.3.x	: These vulnerabilities are on 10.3 HF3. We have come a long way. All these vulnerabilities are remediated in our latest product versions.Please upgrade.");
        mdmVersions.put("10.4.3", "CVE-2021-45056,CVE-2021-44228 : Apache log4j2 : High : MDM 10.4HF3 : knowledge.informatica.com/s/article/Log4J-remediation-for-Multidomain-MDM?language=en_US");
        mdmVersions.put("9.2.4.5", "CVE-2023-50164 : Apache Struts 2:High :AVOS 9.2.4.6, AVOS 9.2.4.5 : knowledge.informatica.com/s/article/Informatica-s-Response-to-Apache-Struts-2-Vulnerability?language=en_US");
        mdmVersions.put("10.5", "CVE-2015-4000,CVE-2023-28708, CVE-2023-42794, CVE-2023-42795, CVE-2023-44487, CVE-2023-45648: Diffie-Hellman vulnerability:High:MDM 10.5:Enable TLS 1.2 and disable all the cipher suites that are found vulnerable.: knowledge.informatica.com/s/article/FAQ-How-to-Enable-TLS-1-2-On-MDM-Server?language=en_US,https://knowledge.informatica.com/s/article/601981?language=en_US");
        mdmVersions.put("10.4", "No CVE : ejbhttptunnel Java Unsafe Deserialization : High : MDM 10.4:Will be Fixed in 10.5 HF3");
        mdmVersions.put("Any", "CVE-2024-22243,CVE-2024-22243 : Spring Framework Open Redirect Vulnerability and Spring Framework URL Parsing with Host Validation : High : Any : Will be Fixed in 10.5HF3");
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Get the user input
        String userVersion = request.getParameter("mdmVersion");

        // Set response content type
        response.setContentType("text/html");

        // Start building the HTML response with background image and CSS styles
        response.getWriter().println("<html>");
        response.getWriter().println("<head>");
        response.getWriter().println("<title>Vulnerability Check Results</title>");
        response.getWriter().println("<style>");
        response.getWriter().println("body {");
        response.getWriter().println("    font-family: Arial, sans-serif;");
        response.getWriter().println("    background-image: url('your-background-image.jpg');");
        response.getWriter().println("    background-size: cover;");
        response.getWriter().println("    background-position: center;");
        response.getWriter().println("    padding: 20px;");
        response.getWriter().println("}");
        response.getWriter().println(".container {");
        response.getWriter().println("    max-width: 800px;");
        response.getWriter().println("    margin: 0 auto;");
        response.getWriter().println("    background-color: rgba(255, 255, 255, 0.8);");
        response.getWriter().println("    padding: 20px;");
        response.getWriter().println("    border-radius: 10px;");
        response.getWriter().println("    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);");
        response.getWriter().println("}");
        response.getWriter().println(".output-table {");
        response.getWriter().println("    border-collapse: collapse;");
        response.getWriter().println("    width: 100%;");
        response.getWriter().println("}");
        response.getWriter().println(".output-table th, .output-table td {");
        response.getWriter().println("    border: 1px solid #ddd;");
        response.getWriter().println("    padding: 10px;");
        response.getWriter().println("    text-align: left;");
        response.getWriter().println("}");
        response.getWriter().println(".output-table th {");
        response.getWriter().println("    background-color: #f2f2f2;");
        response.getWriter().println("}");
        response.getWriter().println("</style>");
        response.getWriter().println("</head>");
        response.getWriter().println("<body>");

        // Main content container
        response.getWriter().println("<div class='container'>");

        // Add the heading
        response.getWriter().println("<h1 style='text-align: center;'>Vulnerability Check Results</h1>");

        // Check for null or empty input
        if (userVersion == null || userVersion.trim().isEmpty()) {
            response.getWriter().println("<p>No MDM version provided.</p>");
        } else {
            // Find the corresponding KB information
            String kbInfo = mdmVersions.get(userVersion.trim());

            if (kbInfo != null) {
                // Split the KB information into parts (assuming parts are separated by ':')
                String[] kbParts = kbInfo.split(":");

                // Ensure there are enough parts to display in the table
                String CVE = kbParts.length > 0 ? kbParts[0].trim() : "";
                String Vulnerability = kbParts.length > 1 ? kbParts[1].trim() : "";
                String Severity = kbParts.length > 2 ? kbParts[2].trim() : "";
                String Version = kbParts.length > 3 ? kbParts[3].trim() : "";
                String Solution = kbParts.length > 4 ? kbParts[4].trim() : "";

                // Add the table with vulnerability information
                response.getWriter().println("<table class='output-table'>");
                response.getWriter().println("<tr><th>CVE</th><th>Vulnerability</th><th>Severity</th><th>Version</th><th>Solution</th></tr>");
                response.getWriter().println("<tr>");
                response.getWriter().println("<td>" + CVE + "</td>");
                response.getWriter().println("<td>" + Vulnerability + "</td>");
                response.getWriter().println("<td>" + Severity + "</td>");
                response.getWriter().println("<td>" + Version + "</td>");
                response.getWriter().println("<td>" + Solution + "</td>");
                response.getWriter().println("</tr>");
                response.getWriter().println("</table>");
            } else {
                response.getWriter().println("<p>MDM Version not found: " + userVersion + "</p>");
            }
        }

        // Back to Home link
        response.getWriter().println("<p style='text-align: center;'><a href='index.jsp'>Back to Home</a></p>");

        // Close main content container and body
        response.getWriter().println("</div>");
        response.getWriter().println("</body>");
        response.getWriter().println("</html>");
    }

    // Optionally handle GET requests
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }
}
